@page "/updatechapter/{chapterId}"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Diagnostics
@inject CustomStateProvider AuthStateProvider


<style>
    .form-col {
        max-width: 37%; /* Ajustează valoarea pentru a seta lățimea maximă dorită */
        width: 100%;
    }

    /* Elimină sublinierea implicită a link-ului */
    .font-weight-normal:hover {
        text-decoration: none;
    }

    .form-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Ajustează înălțimea după preferințe */
    }


    .container-fluid {
        margin: 0;
        padding: 5%;
    }

    .custom-cancel-btn {
        background-color: #f2f2f2;
        color: black;
        border: none;
        outline: none; /* Adaugă această regulă pentru a elimina conturul albastru la focus */
    }

    .custom-save-btn {
        background-color: #ff9404;
        color: white;
        border: none;
        outline: none; /* Adaugă această regulă pentru a elimina conturul albastru la focus */
    }

        .custom-save-btn:hover {
            background-color: #fcba5c;
            color: black;
            border: none;
            outline: none;
        }

    .custom-cancel-btn:hover {
        background-color: #fcba5c;
        color: black;
        border: none;
        outline: none;
    }

    @@media (max-width: 992px) {
        .form-col {
            max-width: 100%;
            margin: 0 auto;
        }
    }
</style>
<div class="container-fluid bg-light">
    <div class="row justify-content-md-center">
        <div class="col-md-6 form-col">
            <div class="card">
                <div class="card-body">
                    <h1 class="h2 font-weight-normal title text-center">
                        Update Chapter
                    </h1>
                    <p class="text-center">Please update chapter details below!</p>

                    <EditForm Model="@ChapterViewModel" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="title" class="col-sm-12 form-label">Chapter Title:</label>
                            <div class="col-sm-12">
                                <InputText id="title" class="form-control" @bind-Value="@ChapterViewModel.Title" placeholder="Enter chapter title"></InputText>
                                <ValidationMessage For="@(() => ChapterViewModel.Title)" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="link" class="col-sm-12 form-label">Chapter Link:</label>
                            <div class="col-sm-12">
                                <InputText id="link" class="form-control" @bind-Value="@ChapterViewModel.Link" placeholder="Enter chapter link"></InputText>
                                <ValidationMessage For="@(() => ChapterViewModel.Link)" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="pdfFile" class="col-sm-12 form-label">Upload PDF:</label>
                            <div class="col-sm-12">
                                <InputFile id="pdfFile" class="form-control" OnChange="HandleFileUpload"></InputFile>
                                <ValidationMessage For="@(() => ChapterViewModel.Content)" />
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="d-flex flex-column">
                                <button type="submit" class="btn btn-lg btn-primary btn-block mt-3 custom-save-btn">Update Chapter</button>
                                <hr class="my-3 w-100 mx-auto">
                                <button class="btn btn-lg btn-primary btn-block mt-3 custom-cancel-btn" @onclick="Cancel">Cancel</button>
                            </div>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Inject]
    public IChapterDataService ChapterDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string ChapterId { get; set; }

    public ChapterViewModel ChapterViewModel { get; set; } = new ChapterViewModel();

    public string Message { get; set; }

    public bool HasAdminRole = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var claims = user.Claims.ToList();
            bool hasAdminOrProfessorRole = claims.Any(claim => claim.Type == "role" && (claim.Value == "Admin" || claim.Value == "Professor"));
            HasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");

            if (!hasAdminOrProfessorRole)
            {
                Message = "Only admins and professors are allowed to update chapters";
                if (HasAdminRole)
                {
                    NavigationManager.NavigateTo("/chapteroverview");
                }
                else
                {
                    NavigationManager.NavigateTo("/categoryoverview");
                }                
            }

            if (!string.IsNullOrEmpty(ChapterId))
            {
                var chapterResponse = await ChapterDataService.GetChapterByIdAsync(Guid.Parse(ChapterId));
                if (chapterResponse.IsSuccess)
                {
                    ChapterViewModel = chapterResponse.Data;
                }
                else
                {
                    // Handle the case when the chapter cannot be retrieved.
                    // Redirect to an error page, display a message, etc.
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("S-a oprit executia: " + ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await ChapterDataService.UpdateChapterAsync(ChapterViewModel);
        if (result.IsSuccess)
        {
            Message = "Chapter updated successfully";
            if (HasAdminRole)
            {
                NavigationManager.NavigateTo("/chapteroverview");
            }
            else
            {
                NavigationManager.NavigateTo("/categoryoverview");
            }
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        Console.WriteLine(file.Size);
        try
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 1024 * 3000).CopyToAsync(memoryStream);
                ChapterViewModel.Content = memoryStream.ToArray();
            }
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine(ex.Message);
        }
    }


    private void Cancel()
    {
        if(HasAdminRole){
            NavigationManager.NavigateTo("/chapteroverview");
        }
        else
        {
            NavigationManager.NavigateTo("/categoryoverview");
        }}
    }
}
