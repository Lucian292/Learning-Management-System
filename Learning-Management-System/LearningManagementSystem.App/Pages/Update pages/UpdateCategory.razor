@page "/updatecategory/{categoryId}"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@inject CustomStateProvider AuthStateProvider

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        color: #333;
    }

    .form-col {
        max-width: 37%; /* Ajustează valoarea pentru a seta lățimea maximă dorită */
        width: 100%;
    }

    /* Elimină sublinierea implicită a link-ului */
    .font-weight-normal:hover {
        text-decoration: none;
    }

    .container-fluid {
        margin: 0;
        padding: 5%;
    }

    .custom-cancel-btn {
        background-color: #f2f2f2;
        color: black;
        border: none;
        outline: none; /* Adaugă această regulă pentru a elimina conturul albastru la focus */
    }

    .custom-save-btn {
        background-color: #ff9404;
        color: white;
        border: none;
        outline: none; /* Adaugă această regulă pentru a elimina conturul albastru la focus */
    }

        .custom-save-btn:hover {
            background-color: #fcba5c;
            color: black;
            border: none;
            outline: none;
        }

    .custom-cancel-btn:hover {
        background-color: #fcba5c;
        color: black;
        border: none;
        outline: none;
    }

    @@media (max-width: 992px) {
        .form-col {
            max-width: 100%;
            margin: 0 auto;
        }
    }

</style>

<div class="container-fluid bg-light">
    <div class="row justify-content-md-center">
        <div class="col-md-6 form-col">
            <div class="card">
                <div class="card-body">
                    <h1 class="h2 font-weight-normal title text-center">
                        Update Category
                    </h1>
                    <p class="text-center">Please update category details below!</p>

                    <EditForm Model="@CategoryViewModel" OnValidSubmit="@HandleValidSubmit" class="form-category">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label for="categoryname" class="sr-only">Category name:</label>
                            <label>Category name:</label>
                            <InputText id="categoryname" class="form-control" @bind-Value="@CategoryViewModel.CategoryName" placeholder="Enter category name"></InputText>
                            <ValidationMessage For="@(() => CategoryViewModel.CategoryName)" />
                        </div>

                        <div class="form-group">
                            <label for="description" class="sr-only">Description:</label>
                            <label>Description:</label>
                            <InputText id="description" class="form-control" @bind-Value="@CategoryViewModel.Description" placeholder="Enter category description"></InputText>
                            <ValidationMessage For="@(() => CategoryViewModel.Description)" />
                        </div>

                        <div class="form-group">
                            <div class="d-flex flex-column">
                                <button type="submit" class="btn btn-lg btn-primary btn-block mt-3 custom-save-btn">Update category</button>
                                <hr class="my-3 w-100 mx-auto">
                                <button class="btn btn-lg btn-primary btn-block mt-3 custom-cancel-btn" @onclick="Cancel">Cancel</button>
                            </div>
                        </div>

                        <div class="form-group text-center">
                            <ValidationSummary></ValidationSummary>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string CategoryId { get; set; }

    public CategoryViewModel CategoryViewModel { get; set; } = new CategoryViewModel();
    public string Message { get; set; }

    bool HasAdminRole = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToList();
        bool hasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");

        if (!hasAdminRole)
        {
            Message = "Only admins are allowed to update categories";
            NavigationManager.NavigateTo("/categoryoverview");
        }

        if (!string.IsNullOrEmpty(CategoryId))
        {
            var categoryResponse = await CategoryDataService.GetCategoryByIdAsync(Guid.Parse(CategoryId));
            if (categoryResponse.IsSuccess)
            {
                CategoryViewModel = categoryResponse.Data;
            }
            else
            {
                // Handle the case when the category cannot be retrieved.
                // Redirect to an error page, display a message, etc.
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await CategoryDataService.UpdateCategoryAsync(CategoryViewModel);
        if (result.IsSuccess)
        {
            Message = "Category updated successfully";
            NavigationManager.NavigateTo("/categoryoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/categoryoverview");
    }
}
