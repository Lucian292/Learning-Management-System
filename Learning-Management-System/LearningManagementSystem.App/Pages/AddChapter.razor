@page "/addchapter"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@inject ICourseDataService CourseDataService
@inject IChapterDataService ChapterDataService
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider

<h3>New Chapter</h3>

<EditForm Model="@ChapterViewModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3 ms-2">
        <label for="course" class="col-sm-3 form-label">Course:</label>
        <div class="col-sm-5">
            @if (Courses != null)
            {
                <select id="course" class="form-select" @bind="@ChapterViewModel.CourseId">
                    @foreach (var course in Courses)
                    {
                        <option value="@course.CourseId">@course.Title</option>
                    }
                </select>
                <ValidationMessage For="@(() => ChapterViewModel.CourseId)" />
            }
            else
            {
                <p>Loading courses...</p>
            }
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="title" class="col-sm-3 form-label">Chapter Title:</label>
        <div class="col-sm-5">
            <InputText id="title" class="form-control" @bind-Value="@ChapterViewModel.Title" placeholder="Enter chapter title"></InputText>
            <ValidationMessage For="@(() => ChapterViewModel.Title)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="link" class="col-sm-3 form-label">Link:</label>
        <div class="col-sm-5">
            <InputText id="link" class="form-control" @bind-Value="@ChapterViewModel.Link" placeholder="Enter link"></InputText>
            <ValidationMessage For="@(() => ChapterViewModel.Link)" />
        </div>
    </div>

    @* <div class="row mb-3 ms-2">
        <label for="content" class="col-sm-3 form-label">Content (PDF):</label>
        <div class="col-sm-5">
            <InputFile id="content" class="form-control" @bind-Value="@ChapterViewModel.Content" />
            <ValidationMessage For="@(() => ChapterViewModel.Content)" />
        </div>
    </div> *@

    <button type="submit" class="btn btn-primary">Save Chapter</button>
    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    public List<CourseDto> Courses { get; set; }
    public ChapterViewModel ChapterViewModel { get; set; } = new ChapterViewModel();
    public string Message { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToList();
        bool hasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");
        if (!hasAdminRole)
        {
            Message = "Only admins are allowed to create chapters";
            NavigationManager.NavigateTo("/chapteroverview");
        }
        Courses = (await CourseDataService.GetCoursesAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        var result = await ChapterDataService.CreateChapterAsync(ChapterViewModel);
        if (result.IsSuccess)
        {
            Message = "Chapter created successfully";
            NavigationManager.NavigateTo("/chapteroverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/chapteroverview");
    }
}
