@page "/addcategory"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@using System.Security.Claims
@inject CustomStateProvider AuthStateProvider
<h3>New category</h3>

<EditForm Model="@CategoryViewModel" OnValidSubmit="@HandleValidSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary></ValidationSummary>

    <div class="row mb-3 ms-2">
        <label for="categoryname" class="col-sm-3 form-label">Category name:</label>
        <div class="col-sm-5">
            <InputText id="categoryname" class="form-control" @bind-Value="@CategoryViewModel.CategoryName" placeholder="Enter category name"></InputText>
            <ValidationMessage For="@(() => CategoryViewModel.CategoryName)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="description" class="col-sm-3 form-label">Description:</label>
        <div class="col-sm-5">
            <InputText id="description" class="form-control" @bind-Value="@CategoryViewModel.Description" placeholder="Enter category description"></InputText>
            <ValidationMessage For="@(() => CategoryViewModel.Description)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Save category</button>
    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public CategoryViewModel CategoryViewModel { get; set; } = new CategoryViewModel();

    public string Message { get; set; }
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        var claims = user.Claims.ToList();

        bool hasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");

        if (!hasAdminRole)
        {
            Message = "Only admins are allowed to create categories";
            NavigationManager.NavigateTo("/categoryoverview");
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await CategoryDataService.CreateCategoryAsync(CategoryViewModel);
        if (result.IsSuccess)
        {
            Message = "Category created successfully";
            NavigationManager.NavigateTo("/categoryoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/categoryoverview");
    }
}
