@page "/courseoverview"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.Services
@using LearningManagementSystem.App.ViewModels
@inject CustomStateProvider AuthStateProvider

<style>
    h3 {
        font-weight: bold;
        text-align: center;
    }

    .course-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    .course-card {
        border: 1px solid #ccc;
        margin: 10px;
        padding: 20px;
        width: calc(100% / 3 - 40px); /* 4 carduri pe rând pe desktop */
        box-sizing: border-box;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .course-header {
        display: flex;
        justify-content: space-between;
    }

    .course-title {
        font-size: 20px;
        margin: 0 0 10px 0;
        font-weight: bold;
        text-align: center;
    }

    .course-professor,
    .course-category,
    .course-description {
        margin: 0;
    }

    .course-professor {
        text-align: right;
    }

    .button-container {
        display: flex;
        justify-content: space-between;
    }

    .enroll-button {
        background-color: #ff9404;
        color: white;
        border: none;
        outline: none; /* Adaugă această regulă pentru a elimina conturul albastru la focus */
        text-align: right;
        border-radius: 5px;
        margin-top: 10px;
    }

    .enroll-button:hover {
        background-color: #fcba5c;
        color: black;
        border: none;
        outline: none;
    }

    .single-button {
        margin: auto;
    }

    @@media (max-width: 1024px) {
        /* 3 carduri pe rând pe tabletă */
        .course-card {
            width: calc(100% / 2 - 40px);
        }
    }

    @@media (max-width: 768px) {
        /* 2 carduri pe rând pe mobile */
        .course-card {
            width: calc(100% / 1 - 40px);
        }
    }
</style>


<h3>All Courses</h3>

<br />

<div class="course-container">
    @if (Courses == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        foreach (var course in Courses)
        {
         //   if (!EnrolledCourses.Any(ec => ec.CourseId == course.CourseId))
           // {
                LoadUserInfo(course.UserId);
                <div class="course-card">
                    <div class="course-header">
                        <h2 class="course-title">@course.Title</h2>
                        @if (UserInfo != null)
                        {
                            <p class="course-professor">by @UserInfo.FirstName @UserInfo.LastName</p>
                        }
                    </div>
                    <b class="course-category">Category:</b> @course.Category.CategoryName
                    <b class="course-description">Description:</b> @course.Description
                    <div class="button-container">
                        <button class="btn btn-primary enroll-button @(HasAdminRole || UserId == course.UserId ? "" : "single-button")" @onclick="() => NavigateToCourseChapters(course.CourseId)">View Chapters</button>
                    @if (!EnrolledCourses.Any(ec => ec.CourseId == course.CourseId))
                        {
                        <button class="btn btn-primary enroll-button" @onclick="() => EnrollToCourse(course.CourseId, UserId)">Enroll</button>
                        }
                        else
                        {
                            //putem afisa altceva de exemplu "Enrolled"
                            <p style="margin-top: 20px;">Enrolled</p>
                        }
                        @if (HasAdminRole || UserId == course.UserId)
                        {
                            <button class="btn btn-success enroll-button" @onclick="() => NavigateToUpdateCourse(course.CourseId)">Update</button>
                        }
                    </div>
                </div>
           // }
        }
    }
</div>

@code {
        [Inject]
        public ICourseDataService CourseDataService { get; set; }

        [Inject]
        public IUserDataService UserDataService { get; set; }

        [Inject]
        public IEnrollmentDataService EnrollmentDataService { get; set; }

        [Inject]
        public NavigationManager NavigationManager { get; set; }

    public List<CourseDto> Courses { get; set; }

    public List<EnrolledCourseDto> EnrolledCourses { get; set; }

    public UserDto UserInfo { get; set; }

    public bool HasAdminRole = false;

    public Guid UserId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        Courses = (await CourseDataService.GetCoursesAsync()).ToList();
        EnrolledCourses = (await EnrollmentDataService.GetEnrolledCoursesAsync(UserId)).ToList(); 

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();

        var userIdClaim = claims.FirstOrDefault(claim => claim.Type == "nameid");

        HasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");

        if (userIdClaim != null) UserId = Guid.Parse(userIdClaim.Value);

    }

    private void OnIncludeHistoryChanged(ChangeEventArgs e)
    {   
        if ((bool)e.Value)
        {
            NavigationManager.NavigateTo("/courseoverview?includeHistory=true");
        }
        else
        {
            NavigationManager.NavigateTo("/courseoverview");
        }
    }

    private void NavigateToCourseChapters(Guid courseId)
    {
        NavigationManager.NavigateTo($"/coursechapters/{courseId}");
    }

    private void NavigateToUpdateCourse(Guid courseId)
    {
        NavigationManager.NavigateTo($"/updatecourse/{courseId}");
    }

    private async Task LoadUserInfo(Guid userId)
    {
        var userInfo = await GetUserInfo(userId);
        UserInfo = userInfo; // Asignează rezultatul în propietatea UserInfo
    }

    private async Task<UserDto> GetUserInfo(Guid userId)
    {
        var userInfo = await UserDataService.GetUserInfoByIdAsync(userId);
        return userInfo.Data;
    }


    private async Task EnrollToCourse(Guid courseId, Guid userId)
    {
            var enrolledCourse = new EnrolledCourseDto
                {
                    CourseId = courseId,
                    UserId = userId,
                    Progress = 0
                };

            var result = await EnrollmentDataService.CreateEnrollmentAsync(enrolledCourse);
            if (result != null)
            {
                NavigationManager.NavigateTo($"/coursechapters/{courseId}");
            }
            else
            {
                NavigationManager.NavigateTo($"/coursesoverviwe");
            }
    }

}
