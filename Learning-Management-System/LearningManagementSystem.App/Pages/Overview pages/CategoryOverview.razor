@page "/categoryoverview"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@inject CustomStateProvider AuthStateProvider

<style>
    h3 {
        font-weight: bold;
        text-align: center;
    }

    .category-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    .category-name, 
    .category-description {
        text-align: center;
    }

    .category-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        margin: 10px;
        padding: 20px;
        width: calc(100% / 3 - 40px); /* 4 carduri pe rând pe desktop */
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .category-card h2 {
        font-size: 20px;
        margin: 0 0 10px 0;
        font-weight: bold;
    }

    .category-card p {
        margin: 0;
    }

    .button-container {
        display: flex;
        justify-content: space-between;
    }

    .course-button {
        background-color: #ff9404;
        color: white;
        border: none;
        outline: none; /* Adaugă această regulă pentru a elimina conturul albastru la focus */
        border-radius: 5px;
    }

    .course-button:hover {
        background-color: #fcba5c;
        color: black;
        border: none;
        outline: none;
     }

    .single-button {
        margin: auto;
    }

    @@media (max-width: 1024px) {
        /* 3 carduri pe rând pe tabletă */
        .category-card {
            width: calc(100% / 2 - 40px);
        }
    }

    @@media (max-width: 768px) {
        /* 2 carduri pe rând pe mobile */
        .category-card {
            width: calc(100% / 1 - 40px);
        }
    }
</style>

<h3>All Categories</h3>


<br />

@* <p><input class="custom-checkbox" type="checkbox" id="includeHistory" @onchange="OnIncludeHistoryChanged" />   Include past events?</p>
 *@
<div class="category-container">
    @if (Categories == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var cat in Categories)
        {
            <div class="category-card">
                <h2 class="categoty-name">@cat.CategoryName</h2>
                <p class="category-description">@cat.Description</p>
                <div class="button-container">
                   <button class="btn btn-primary course-button @(HasAdminRole ? "" : "single-button")" @onclick="() => NavigateToCategoryCourses(cat.CategoryId)">View Courses</button>
                   @if (HasAdminRole)
                   {
                        <button class="btn btn-success course-button" @onclick="() => NavigateToUpdateCategory(cat.CategoryId)">Update</button>
                   }
                </div>
            </div>
        }
    }
</div>

@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public List<CategoryViewModel> Categories { get; set; }

    public bool HasAdminRole = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();

        //var userIdClaim = claims.FirstOrDefault(claim => claim.Type == "nameid");

        HasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");

        Categories = (await CategoryDataService.GetCategoriesAsync()).ToList();
    }

    private void OnIncludeHistoryChanged(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            NavigationManager.NavigateTo("/categoryoverview?includeHistory=true");
        }
        else
        {
            NavigationManager.NavigateTo("/categoryoverview");
        }
    }

    private void NavigateToCategoryCourses(Guid categoryId)
    {
        NavigationManager.NavigateTo($"/getcategorycourses/{categoryId}");
    }

    private void NavigateToUpdateCategory(Guid categoryId)
    {
        NavigationManager.NavigateTo($"/updatecategory/{categoryId}");
    }
}
