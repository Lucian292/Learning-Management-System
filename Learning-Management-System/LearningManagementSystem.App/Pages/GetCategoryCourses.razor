@page "/getcategorycourses/{categoryId}"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@inject NavigationManager NavigationManager
@inject CustomStateProvider AuthStateProvider

<style>
    .first-section {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        margin-top: 30px;
    }

        .first-section .title {
            font-weight: bold;
            text-align: left;
            color: #ff7f00;
            font-size: 2.5em;
            margin-left: 5px;
        }

        .first-section .description {
            font-size: 0.9em;
            text-align: right;
            color: #333;
            max-width: 50%;
            font-size: 1em;
            margin-right: 5px;
        }

    @@media (max-width: 900px) {
        .first-section {
            flex-direction: column;
        }

            .first-section .title,
            .first-section .description {
                text-align: center;
                max-width: 100%;
            }
    }

    .course-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    .course-card {
        border: 1px solid #ccc;
        margin: 10px;
        padding: 20px;
        width: calc(100% / 3 - 40px); 
        box-sizing: border-box;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .course-header {
        display: flex;
        justify-content: space-between;
    }

    .course-title {
        font-size: 20px;
        margin: 0 0 10px 0;
        font-weight: bold;
        text-align: center;
    }

    .course-professor,
    .course-category,
    .course-description {
        margin: 0;
        text-align: center;
    }

    .course-professor {
        text-align: right;
    }

    .button-container {
        display: flex;
        justify-content: space-between;
    }

    .enroll-button {
        background-color: #ff9404;
        color: white;
        border: none;
        outline: none; 
        text-align: right;
        border-radius: 5px;
    }

        .enroll-button:hover {
            background-color: #fcba5c;
            color: black;
            border: none;
            outline: none;
        }

    .single-button {
        margin: auto;
    }

    @@media (max-width: 1024px) {
        /* 3 carduri pe rând pe tabletă */
        .course-card {
            width: calc(100% / 2 - 40px);
        }
    }

    @@media (max-width: 768px) {
        /* 2 carduri pe rând pe mobile */
        .course-card {
            width: calc(100% / 1 - 40px);
        }
    }
</style>

@if (Category != null)
{
    <div class="first-section">
        <h4 class="title">@Category.CategoryName</h4>
        <p class="description">@Category.Description</p>
    </div>

    @if (Category.Courses != null && Category.Courses.Any())
    {
        <div class="course-container">
            @foreach (var course in Category.Courses)
            {
                if (!EnrolledCourses.Any(ec => ec.CourseId == course.CourseId))
                {
                    <div class="course-card">
                        <div class="course-header">
                            <h2 class="course-title">@course.Title</h2>
                        </div>
                        <p class="course-description">@course.Description</p>
                        <div class="button-container">
                            <button class="btn btn-primary enroll-button @(HasAdminRole || UserId == course.UserId ? "" : "single-button")" @onclick="() => NavigateToCourseChapters(course.CourseId)">View Chapters</button>
                            <button class="btn btn-primary enroll-button" @onclick="() => EnrollToCourse(course.CourseId, UserId)">Enroll</button>
                            @if (HasAdminRole || UserId == course.UserId)
                            {
                                <button class="btn btn-success enroll-button" @onclick="() => NavigateToUpdateCourse(course.CourseId)">Update</button>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <p>No courses available in this category.</p>
    }
}
else
{
    <p>Loading...</p>
}


@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public IEnrollmentDataService EnrollmentDataService { get; set; }

    [Inject]
    public ICourseDataService CourseDataService { get; set; } 

    [Parameter]
    public string CategoryId { get; set; }

    public CategoryDto Category { get; set; }
    
    public List<CourseDto> Courses { get; set; }

    public List<EnrolledCourseDto> EnrolledCourses { get; set; }

    public bool HasAdminRole = false;

    public Guid UserId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        Courses = (await CourseDataService.GetCoursesAsync()).ToList();
        EnrolledCourses = (await EnrollmentDataService.GetEnrolledCoursesAsync(UserId)).ToList();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var claims = user.Claims.ToList();

        var userIdClaim = claims.FirstOrDefault(claim => claim.Type == "nameid");

        HasAdminRole = claims.Any(claim => claim.Type == "role" && claim.Value == "Admin");

        if (userIdClaim != null) UserId = Guid.Parse(userIdClaim.Value);

        var categoryId = Guid.Parse(CategoryId);
        if (categoryId == Guid.Empty)
        {
            ShowNotification("Invalid CategoryId", NotificationType.Error);
            return;
        }

        var response = await CategoryDataService.GetCoursesByCategoryAsync(categoryId);
        Category = response.Data;
    }

    private void ShowNotification(string message, NotificationType type)
    {
        // Puteți implementa aici logica de afișare a notificării
        // De exemplu, prin setarea unei variabile de stare și afișarea în interfață
        // sau prin utilizarea unui serviciu de notificare existent în aplicația dvs.
        Console.WriteLine($"Notification: {type} - {message}");
    }
    public enum NotificationType
    {
        Success,
        Error,
        Info,
        Warning
    }

    private void NavigateToCourseChapters(Guid courseId)
    {
        NavigationManager.NavigateTo($"/coursechapters/{courseId}");
    }

    private void NavigateToUpdateCourse(Guid courseId)
    {
        NavigationManager.NavigateTo($"/updatecourse/{courseId}");
    }

    private async Task EnrollToCourse(Guid courseId, Guid userId)
    {
        var enrolledCourse = new EnrolledCourseDto
            {
                CourseId = courseId,
                UserId = userId,
                Progress = 0
            };

        var result = await EnrollmentDataService.CreateEnrollmentAsync(enrolledCourse);
        if (result != null)
        {
            NavigationManager.NavigateTo($"/coursechapters/{courseId}");
        }
        else
        {
            NavigationManager.NavigateTo($"/coursesoverviwe");
        }
    }
}
