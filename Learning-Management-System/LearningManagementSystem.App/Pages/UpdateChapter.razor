@page "/updatechapter/{chapterId}"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject CustomStateProvider AuthStateProvider

<h3>Update Chapter</h3>

<EditForm Model="@ChapterViewModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3 ms-2">
        <label for="title" class="col-sm-3 form-label">Chapter Title:</label>
        <div class="col-sm-5">
            <InputText id="title" class="form-control" @bind-Value="@ChapterViewModel.Title" placeholder="Enter chapter title"></InputText>
            <ValidationMessage For="@(() => ChapterViewModel.Title)" />
        </div>
    </div>

    <div class="row mb-3 ms-2">
        <label for="link" class="col-sm-3 form-label">Chapter Link:</label>
        <div class="col-sm-5">
            <InputText id="link" class="form-control" @bind-Value="@ChapterViewModel.Link" placeholder="Enter chapter link"></InputText>
            <ValidationMessage For="@(() => ChapterViewModel.Link)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Update Chapter</button>
    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Inject]
    public IChapterDataService ChapterDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string ChapterId { get; set; }

    public ChapterViewModel ChapterViewModel { get; set; } = new ChapterViewModel();

    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToList();
        bool hasAdminOrProfessorRole = claims.Any(claim => claim.Type == "role" && (claim.Value == "Admin" || claim.Value == "Professor"));

        if (!hasAdminOrProfessorRole)
        {
            Message = "Only admins and professors are allowed to update chapters";
            NavigationManager.NavigateTo("/chapteroverview");
        }

        if (!string.IsNullOrEmpty(ChapterId))
        {
            var chapterResponse = await ChapterDataService.GetChapterByIdAsync(Guid.Parse(ChapterId));
            if (chapterResponse.IsSuccess)
            {
                ChapterViewModel = chapterResponse.Data;
            }
            else
            {
                // Handle the case when the chapter cannot be retrieved.
                // Redirect to an error page, display a message, etc.
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        var result = await ChapterDataService.UpdateChapterAsync(ChapterViewModel);
        if (result.IsSuccess)
        {
            Message = "Chapter updated successfully";
            NavigationManager.NavigateTo("/chapteroverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/chapteroverview");
    }
}
