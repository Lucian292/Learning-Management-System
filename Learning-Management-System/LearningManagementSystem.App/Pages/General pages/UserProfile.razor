@page "/userprofile"
@using LearningManagementSystem.App.Auth
@using LearningManagementSystem.App.Contracts
@using LearningManagementSystem.App.ViewModels
@inject CustomStateProvider AuthStateProvider

<style>
    h3 {
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
        margin-top: 10px;
    }

    .card {
        border-radius: 10px;
    }

    .font-weight-normal:hover {
        text-decoration: none;
    }

    .user-courses {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .course-card {
        border: 1px solid #ccc;
        margin: 10px;
        padding: 20px;
        width: calc(100% / 3 - 40px);
        box-sizing: border-box;
        border-radius: 5px;
        background-color: white; 
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); 
        transition: 0.3s;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .course-card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    .retire-button {
        align-self: center;
        background-color: #FF9500;
        color: white;
        border: none;
        outline: none;
        text-align: center;
        border-radius: 5px;
        margin-top: 10px;
        display: inline-block;
        width: auto;
        padding: 10px 20px;
    }

        .retire-button:hover {
            background-color: #FF6347;
            color: black;
            border: none;
            outline: none;
        }

    .open-button{
        align-self: center;
        background-color: #FF9500;
        color: white;
        border: none;
        outline: none;
        text-align: center;
        border-radius: 5px;
        margin-top: 10px;
        display: inline-block;
        width: auto;
        padding: 10px 20px;
    }

        .open-button:hover{
            background-color: #FF6347;
            color: black;
            border: none;
            outline: none;
        }

    @@media (max-width: 768px) {
        .course-card {
            width: calc(100% / 1 - 40px);
        }
    }

    .button-container {
        display: flex;
        justify-content: space-between;
    }

    .course-title {
        font-size: 20px;
        margin: 0 0 10px 0;
        font-weight: bold;
    }

    .course-description {
        align-self: flex-start;
        margin-bottom: 10px;
    }

    .progress {
        align-self: flex-start;
        width: 100%;
        height: 20px;
        background-color: #f3f3f3;
        border-radius: 3px;
    }

    .progress-bar {
        height: 100%;
        line-height: 20px;
        background-color: #4caf50;
        text-align: right;
        border-radius: 3px;
        transition: width 0.3s ease-in-out;
    }

    .progress-label {
        color: #000; 
        position: absolute;
        display: block;
        width: 100%;
        color: black;
        text-align: left;
    }

    .single-button {
        margin: auto;
    }

    .user-card {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 20px;
        max-width: 550px;
        margin: auto;
    }

    .user-pic {
        flex: 1;
        text-align: right;
    }

    .user-profile-pic {
        max-width: 220px; 
        border-radius: 50%; 
    }

    .user-details {
        flex: 2;
        margin-left: 20px;
    }

        .user-details p {
            margin: 0 0 10px;
        }

            .user-details p:first-child {
                font-size: 40px; 
                font-weight: bold;
            }


</style>

<h3>My Account</h3>

<div class="user-card">
    <div class="user-pic">
        <img src="/Images/user-pic.jpg" class="user-profile-pic" />
    </div>
    <div class="user-details">
        @if (UserInfo != null)
        {
            <p>@UserInfo.FirstName @UserInfo.LastName</p>
            <p><strong>User Name:</strong> @UserInfo.UserName</p>
            <p><strong>Email:</strong> @UserInfo.Email</p>
            <p><strong>Phone Number:</strong> @UserInfo.PhoneNumber</p>
        }
        else
        {
            <p><em>No user information available.</em></p>
        }
       </div>
</div>

<h3>My enrollments</h3>

<div class="user-courses">
    @if (EnrolledCourses == null || !EnrolledCourses.Any())
    {
        <p><em>No enrolled courses.</em></p>
    }
    else
    {
        @foreach (var enrolledCourse in EnrolledCourses)
        {
            <div class="course-card">
                <h2 class="course-title"><strong>@enrolledCourse.Course.Title</strong></h2>
                <p class="course-description">@enrolledCourse.Course.Description</p>
                
                @{
                    int numberOfQuestions = 0;
                    int correctAnswers = 0;

                    foreach (var chapter in enrolledCourse.Course.Chapters)
                    {
                        foreach (var question in chapter.Questions)
                        {
                            numberOfQuestions++;

                            // Verifică dacă există un rezultat pentru întrebare și dacă este corect răspunsă
                            var questionResult = QuestionResults.FirstOrDefault(qr => qr.QuestionId == question.QuestionId);
                            if (questionResult != null && questionResult.IsCorrect)
                            {
                                correctAnswers++;
                            }
                        }
                    }

                    // Calcul procentaj întrebări corect răspunse
                    int percentage = numberOfQuestions > 0 ? (correctAnswers * 100) / numberOfQuestions : 0;
                }

                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @percentage%;" aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
                        <span class="progress-label">@percentage%</span>
                    </div>
                </div>

                <div>
                    <button class="open-button" @onclick="() => OpenCourse(enrolledCourse.CourseId)">Open</button>
                    <button class="retire-button" @onclick="() => RetireCourse(enrolledCourse.EnrollmentId)">Retire</button>
                </div>
            </div>
        }
    }
</div>

@if (HasAdminOrProfessorRole)
{
    <h3>My Courses</h3>
    <div class="user-courses">
        @if (ProfessorCourses == null || !ProfessorCourses.Any())
        {
            <p><em>You don't teach any courses yet.</em></p>
        }
        else
        {
            @foreach (var professorCourse in ProfessorCourses)
            {
                <div class="course-card">
                    <h2 class="course-title"><strong>@professorCourse.Title</strong></h2>
                    <p class="course-description">@professorCourse.Description</p>

                    <div>
                        <button class="open-button" @onclick="() => OpenCourse(professorCourse.CourseId)">Open</button>
                    </div>
                </div>
            }
        }
    </div>
}

@code {
    [Inject]
    public IEnrollmentDataService EnrollmentDataService { get; set; }

    [Inject]
    public IUserDataService UserDataService { get; set; }

    [Inject]
    public ICourseDataService CourseDataService { get; set; }

    [Inject]
    public IQuestionResultDataService QuestionResultDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public string UserEmail { get; set; }
    public string UserPhoneNumber { get; set; }
    public string Username { get; set; }
    public UserDto UserInfo { get; set; }
    public bool HasAdminOrProfessorRole = false;

    public Guid UserId = Guid.Empty;

    public List<EnrolledCourseDto> EnrolledCourses { get; set; }
    public List<CourseViewModel> ProfessorCourses { get; set; } = [];
    public List<QuestionResultDto> QuestionResults { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToList();

        var emailClaim = claims.FirstOrDefault(claim => claim.Type == "email");
        var phoneNumberClaim = claims.FirstOrDefault(claim => claim.Type == "phone_number");
        var usernameClaim = claims.FirstOrDefault(claim => claim.Type == "preferred_username");
        var userIdClaim = claims.FirstOrDefault(claim => claim.Type == "nameid");

        HasAdminOrProfessorRole = claims.Any(claim => claim.Type == "role" && (claim.Value == "Admin" || claim.Value == "Professor"));

        if (userIdClaim != null) UserId = Guid.Parse(userIdClaim.Value);

        // Load enrolled courses
        EnrolledCourses = (await EnrollmentDataService.GetEnrolledCoursesAsync(UserId)).ToList();

        if (EnrolledCourses != null)
        {
            // Gestionare scenariu în care încărcarea cursurilor înscrie a eșuat
            // Poți trata acest scenariu cum consideri oportun
            Console.WriteLine($"Failed to load enrolled courses.");
        }

        // Load user information
        var userInfoResponse = await UserDataService.GetUserInfoAsync();
        if (userInfoResponse.IsSuccess)
        {
            UserInfo = userInfoResponse.Data;
        }
        else
        {
            // Gestionare scenariu în care încărcarea informațiilor despre utilizator a eșuat
            // Poți trata acest scenariu cum consideri oportun
            Console.WriteLine($"Failed to load user information.");
        }

        if (HasAdminOrProfessorRole)
        {
            var profCourses = await CourseDataService.GetCourseByProfessorIdAsync();

            if (profCourses.IsSuccess)
                ProfessorCourses = profCourses.Data.Courses;
        }

        // Load QuestionResults courses
        QuestionResults = (await QuestionResultDataService.GetQuestionResultByUserId(UserId)).ToList();
    }

    private async Task RetireCourse(Guid enrollmentId)
    {
        var response = await EnrollmentDataService.RetireCourseAsync(enrollmentId);
        if (response.IsSuccess)
        {
            // Refresh enrolled courses
            EnrolledCourses = (await EnrollmentDataService.GetEnrolledCoursesAsync(UserId)).ToList();
        }
        else
        {
            // Gestionare scenariu în care retragerea cursului a eșuat
            // Poți trata acest scenariu cum consideri oportun
            Console.WriteLine($"Failed to retire course.");
        }
    }

    private void OpenCourse(Guid courseId)
    {
        NavigationManager.NavigateTo($"/coursechapters/{courseId}");
    }
}
